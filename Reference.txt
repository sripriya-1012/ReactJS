
Netflix (4 hours)
  Props [DONE]
  States [DONE]
  Events [DONE]
  Lists & Keys  [DONE]
  Conditional Rendering  [DONE]

Setting up REST API for the app [DONE]
User manager CRUD App 
  Create User [DONE]
  List Users [DOME]
  User Details [DONE]  
    Edit user [TODO]
    Delete User [TODO]


React Query  [DONE]
Axios and fetch [DONE]

=====
E-commerce App (Context API) [DONE]
  List Products 
  Add to Cart 

Debugging  [DONE]

Performance tuning [DONE]
  Lazy loading components 

Zustand [DONE]

Build & Deploy 


====

 Thinking in React 
===
  Step 0: Identifying the number of components 
  Step 1: Comp hierarhcy


components
=====
  2 Types 
  ===
    1. Functional Components [TO LEARN]
      1.1 Functional Component with Named Function
          header component
      1.2 Functional Component with Anonymous Function
          footer component
      1.3 Functional Component with Arrow Function
    2. Class Components [NOT RECOMMENDED]

   

Routing 
====
  npm install react-router-dom

Steps 
====
  1. identify the routes (urls) and menus 
    - Home            -- url: /
    - Netflix         -- url: /netflix
    - Users           -- url: /users
    - About           -- url: /about`
    - Products        -- url: /products
    - Todos           -- url: /todos
    
  2. create a component for each route  
    - url: /            -- component: HomePage
    - url: /netflix     -- component: NetflixPage
    - url: /users       -- component: UsersPage
    - url: /about       -- component: AboutPage
    - url: /products    -- component: ProductsPage
    - url: /todos       -- component: TodosPage

  3. setup the routes in the App.tsx file
    - import { BrowserRouter } from 'react-router-dom';
  
  4. Configure the routes in the App.tsx file
      


Cross Component Communication
===
  1. Parent to Child Component Communication  [DONE]
      using props
  2. Child to Parent Component Communication  [DONE]
      using props and events 
  3. Any to Any Component Communication
      using 
        1. Context API (part of React)
        2. Redux / Redux Toolkit / Zustand / Recoil / MobX 

      
JSX Limitations
===
  1. You must a separate closing tag or self closing tag
  2. class attribute is not allowed. it must be className
  3. style attribute will expect expression. inside which you need to have object 
  4. JSX expressions must have one parent element.

Rules of Hooks 
====
  1. Only call Hooks at the Top Level
  2. Donâ€™t call Hooks inside loops, conditions, or nested functions.
  3. Call Hooks from React Function Components
  4. Call Hooks from custom Hooks 

Error boundaries do not catch errors for:
  Event handlers (learn more)
  Asynchronous code (e.g. setTimeout or requestAnimationFrame callbacks)
  Server side rendering
  Errors thrown in the error boundary itself (rather than its children)


====
ReactJS - Performace Tips
--
1. Use NPM package or any third party libraries only if absolutely needed.
2. Most performance issues come in lists. So, think about having pagination.
  Try this awesome package
  https://bvaughn.github.io/react-virtualized/
3. Make use of props wisely. Don't leave out unused props. 
 
  So, a bad way could be...
  const MyComp = (props) => { //bad way if all props are not used

  }

  but a better way to have props here.. using object destructuring.
  cont MyComp = ({ title, body, postId}){ // ignoring userId, if I don't display it anywhere

  }
  Also,don't pass unneccessary props. 

4. Lazy Load Images 
  https://www.npmjs.com/package/react-lazy-load-image-component
5. Use profiler to record the app pages. And then check and fix the app. 
6. Think about optimizing back end also. 
7. Avoid having unnecessary tags, css. go with Fragment, <></>, 
9. Don't bloat the page with too many components, 
  because components will have re-rendering cycles.
  If one parent comp updates, that will update child comp's till the last level.
10. Don't create even a single class component. Use ONLY functional components. 
  Use hooks to stop child comp re-rendering. Remember useEffect, useCallback!
11. Don't write too many inline styles. You should definitely avoid it inside loops.

12. Use Why did you update tool
    https://www.npmjs.com/package/@welldone-software/why-did-you-render
13. use useMemo, useCallback hooks
14. Learn more performance tips.. There are aplenty.

===
Debugging in Production
---
https://medium.com/@baphemot/intro-to-debugging-reactjs-applications-67cf7a50b3dd